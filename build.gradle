
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'eclipse'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' 

version = config.mc_version + "-" + config.mod_version
group = "me.desht"
archivesBaseName = 'modular-routers'

if (System.getenv().BUILD_NUMBER != null) {
    version += "-${System.getenv().BUILD_NUMBER}"
} else {
    version += "-CUSTOM"
}

minecraft {
    mappings channel: 'snapshot', version: config.mcp_mappings
    //accessTransformer = file('my_at.cfg')
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

repositories {
//    jcenter { }
//    maven { // TOP
//        name = "tterrag maven"
//        url = "http://maven.tterrag.com/"
//    }
//    maven {
//        name = "guideapi/hwyla"
//        url = 'http://tehnut.info/maven/'
//    }
//    maven {
//        name = "tesla"
//        url = "http://maven.mcmoddev.com"
//    }
//    maven {
//        name = "JEI"
//        url = "http://dvs1.progwml6.com/files/maven"
//    }
//    maven {
//        name = "CoFH Maven"
//        url = "http://maven.covers1624.net"
//    }
//    maven {
//        name = "K-4u Mod maven"
//        url = "https://modmaven.k-4u.nl/"
//    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"
    //deobfCompile "mcp.mobius.waila:Hwyla:${config.waila_version}"
    //deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:${config.top_version}"
    //deobfCompile "info.amerifrance.guideapi:Guide-API:1.12-${config.guideapi_version}"
    //deobfCompile "mezz.jei:jei_1.12.2:${config.jei_version}"
    //deobfCompile "cofh:RedstoneFlux:1.12-${config.redstone_flux_version}:universal"
    //provided "com.google.errorprone:error_prone_annotations:2.1.0"
    //compile "net.darkhax.tesla:Tesla-1.12:${config.tesla_version}"
    //compile "team.chisel.ctm:CTM:MC1.12.2-0.3.2.18:api"
    compile "com.google.errorprone:error_prone_annotations:2.0.15"
}

//processResources {
//    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version
//
//    // replace stuff in mcmod.info, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'mcmod.info'
//
//        // replace version and mcversion
//        expand 'version':project.version, 'mcversion':project.minecraft.version
//    }
//
//    // copy everything else, thats not the mcmod.info
//    from(sourceSets.main.resources.srcDirs) {
//        exclude 'mcmod.info'
//    }
//}

//idea { module { inheritOutputDirs = true } }

static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    manifest {
        attributes(["Specification-Title": "modularrouters",
                    "Specification-Vendor": "desht",
                    "Specification-Version": "24.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"desht",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

